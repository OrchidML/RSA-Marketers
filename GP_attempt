import numpy as np
import pandas as pd
from sklearn.gaussian_process import GaussianProcess
import matplotlib.pyplot as pl

df = pd.read_csv('/home/ronald/data/cripps20112014.csv')
#print df['value']
df['indx'] = range(0,209)

gp1 = df['value'].values

#print df['value']

def f(x):
    """The function to predict."""
    return x

#----------------------------------------------------------------------
#  First the noiseless case
X = np.atleast_2d(gp1).T

# Observations
y = f(X).ravel()

#print y

# Mesh the input space for evaluations of the real function, the prediction and
# its MSE
x = np.atleast_2d(df['indx'].values).T

# Instanciate a Gaussian Process model
gp = GaussianProcess(corr='cubic', theta0=1e-2, thetaL=1e-4, thetaU=1e-1,
                     random_start=100)

# Fit to data using Maximum Likelihood Estimation of the parameters
gp.fit(X, y)

# Make the prediction on the meshed x-axis (ask for MSE as well)
y_pred, MSE = gp.predict(x, eval_MSE=True)
sigma = np.sqrt(MSE)

# Plot the function, the prediction and the 95% confidence interval based on
# the MSE
fig = pl.figure()
pl.plot(x, f(x), 'r:', label=u'$f(x) = x\,\sin(x)$')
pl.plot(X, y, 'r.', markersize=10, label=u'Observations')
pl.plot(x, y_pred, 'b-', label=u'Prediction')
pl.fill(np.concatenate([x, x[::-1]]),
        np.concatenate([y_pred - 1.9600 * sigma,
                       (y_pred + 1.9600 * sigma)[::-1]]),
        alpha=.5, fc='b', ec='None', label='95% confidence interval')
pl.xlabel('$x$')
pl.ylabel('$f(x)$')
pl.ylim(-10, 20)
pl.legend(loc='upper left')
